Furthermore, Logger allows messages sent by Erlang to be translated into an Elixir format via translators. Translators can be added at any time with the add_translator/1 and remove_translator/1 APIs. Check Logger.Translator for more information.
Handlers represent the ability to integrate into the logging system to handle each logged message/event. Elixir's Logger automatically sets a default handler based on Erlang's :logger_std_h, which you can configure using the :default_handler boot configuration outlined above. You may also attach additional handlers when you boot your application.
You may also develop your own handlers. Handlers run in the same process as the process logging the message/event. This gives developers flexibility but they should avoid performing any long running action in such handlers, as it may slow down the action being executed considerably. At the moment, there is no built-in overload protection for Erlang handlers, so it is your responsibility to implement it.
Prior to Elixir v1.15, custom logging could be achieved with Logger backends. The main API for writing Logger backends have been moved to the :logger_backends project. However, the backends API are still part of Elixir for backwards compatibility.